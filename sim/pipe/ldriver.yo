                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6d803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7c801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | # Jiaming Ji (jj35553)
                            | # 
                            | # Description of ncopy.ys:
                            | #
                            | # for optimizing the performance of ncopy, i implemented two methods: 
                            | # loop unrolling and loading value early so it's ready by the time 
                            | # the next instructions needs it. In the previous version (The unoptimized version)
                            | # mrmovq (%rdi), %r10  
                            | # rmmovq %r10, (%rsi)
                            | # a cycle is wasted due to data hazard; so I want to eliminate this by adding
                            | # an effective instruction in between the two instructions shown above, to better
                            | # optimize throughput. 
                            | # In my implementation, I added an instruction mrmovq 8(%rdi). %r11
                            | # in between the mrmovq and rmmovq, to ready the next value before we place the 
                            | # previous value in src. What this will do is utilizing the time we need to read 
                            | # the first value and place the first value to also read the second value, because 
                            | # if we don't, a cylce is wasted. 
                            | # 
                            | # For the other method - loop unrolling, instead of reading and placing one value 
                            | # in one iteration, I am reading and placing four values in one iteration - four is 
                            | # just an arbitrary number, could be 3, 5, etc.. by the time the number of remaining 
                            | # values is less than 4, we treat each one individually. 
                            | # 
                            | # The first part of the assembly is setting up everything: set the counter to 0 
                            | # check if length is greater than or equal to four.
                            | #
                            | # The second part of the assembly is the loop unrolling - if the length is >= 4, 
                            | # we will read and place four values in one loop iteration 
                            | #
                            | # The third part of the assembly is treating the remainding values individually based 
                            | # on the length of the remainder. 
                            | #
                            | # All the detailed steps explanations are written as comments right next to the assembly code 
                            | #
                            | #
                            | #
                            | #
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2fcffffffffffffff |     iaddq $-4, %rdx    # len -= 4
0x03e: 721201000000000000   |     jl remainder    # if len is less than 4, we treat it differently
                            | 
0x047:                      | nloop:
0x047: 50a70000000000000000 |     mrmovq (%rdi), %r10    # read first value from src
0x051: 50b70800000000000000 |     mrmovq 8(%rdi), %r11    # read the second value from src
0x05b: 40a60000000000000000 |     rmmovq %r10, (%rsi)    # move the first value to destination
0x065: 62aa                 |     andq %r10, %r10    # is val <= 0
0x067: 717a00000000000000   |     jle first    # if val <= 0, go to first
0x070: c0f00100000000000000 |     iaddq $1, %rax
                            | 
0x07a:                      | first:
0x07a: 40b60800000000000000 |     rmmovq %r11, 8(%rsi)    # move second value to destination
0x084: 50a71000000000000000 |     mrmovq 16(%rdi), %r10    # read the third value
0x08e: 62bb                 |     andq %r11, %r11    # is second value <= 0?
0x090: 71a300000000000000   |     jle second
0x099: c0f00100000000000000 |     iaddq $1, %rax
                            | 
0x0a3:                      | second:
0x0a3: 50b71800000000000000 |     mrmovq 24(%rdi), %r11    # read the fourth value 
0x0ad: 40a61000000000000000 |     rmmovq %r10, 16(%rsi)    # move the third value 
0x0b7: 62aa                 |     andq %r10, %r10
0x0b9: 71cc00000000000000   |     jle third
0x0c2: c0f00100000000000000 |     iaddq $1, %rax
                            | 
0x0cc:                      | third:
0x0cc: 40b61800000000000000 |     rmmovq %r11, 24(%rsi)    # move the fourth value to dest
0x0d6: 62bb                 |     andq %r11, %r11
0x0d8: 71eb00000000000000   |     jle fourth
0x0e1: c0f00100000000000000 |     iaddq $1, %rax
                            | 
0x0eb:                      | fourth:
0x0eb: c0f72000000000000000 |     iaddq $32, %rdi    # update the src pointer, point to the fifth element
0x0f5: c0f62000000000000000 |     iaddq $32, %rsi    # update the dest pointer, point to the fifth position
0x0ff: c0f2fcffffffffffffff |     iaddq $-4, %rdx    # subtract 4 from length to determine which label to jump to
0x109: 754700000000000000   |     jge nloop
                            | 
0x112:                      | remainder:
0x112: c0f20300000000000000 |     iaddq $3, %rdx    # since we subtracted 4 abover, we have to add it back if we have remainders
0x11c: 72c601000000000000   |     jl Done    # if we have no elements left, we go to Done, else we proceeed
0x125: 50a70000000000000000 |     mrmovq (%rdi), %r10    # since we have at least one element in the array, we read it
0x12f: 50b70800000000000000 |     mrmovq 8(%rdi), %r11    # read the next elements in advance
0x139: 40a60000000000000000 |     rmmovq %r10, (%rsi)    # move the read value to dest
0x143: 62aa                 |     andq %r10, %r10
0x145: 715801000000000000   |     jle r2
0x14e: c0f00100000000000000 |     iaddq $1, %rax
                            | 
0x158:                      | r2:
0x158: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x162: 72c601000000000000   |     jl Done
0x16b: 40b60800000000000000 |     rmmovq %r11, 8(%rsi)
0x175: 62bb                 |     andq %r11, %r11
0x177: 718a01000000000000   |     jle r3
0x180: c0f00100000000000000 |     iaddq $1, %rax
                            | 
0x18a:                      | r3:
0x18a: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x194: 72c601000000000000   |     jl Done
0x19d: 50a71000000000000000 |     mrmovq 16(%rdi), %r10    # since this has to be the last element in the array, we don't need read another value in advance
0x1a7: 40a61000000000000000 |     rmmovq %r10, 16(%rsi)    # although we are wasting a cycle, but we have no choice but to do so
0x1b1: 62aa                 |     andq %r10, %r10
0x1b3: 71c601000000000000   |     jle Done
0x1bc: c0f00100000000000000 |     iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1c6:                      | Done:
0x1c6: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1c7:                      | End:
                            | #/* $end ncopy-ys */
0x1c7:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1c8:                      | 	.align 8
0x1c8:                      | src:
0x1c8: ffffffffffffffff     | 	.quad -1
0x1d0: 0200000000000000     | 	.quad 2
0x1d8: 0300000000000000     | 	.quad 3
0x1e0: fcffffffffffffff     | 	.quad -4
0x1e8: 0500000000000000     | 	.quad 5
0x1f0: 0600000000000000     | 	.quad 6
0x1f8: f9ffffffffffffff     | 	.quad -7
0x200: f8ffffffffffffff     | 	.quad -8
0x208: f7ffffffffffffff     | 	.quad -9
0x210: f6ffffffffffffff     | 	.quad -10
0x218: f5ffffffffffffff     | 	.quad -11
0x220: f4ffffffffffffff     | 	.quad -12
0x228: f3ffffffffffffff     | 	.quad -13
0x230: f2ffffffffffffff     | 	.quad -14
0x238: 0f00000000000000     | 	.quad 15
0x240: f0ffffffffffffff     | 	.quad -16
0x248: 1100000000000000     | 	.quad 17
0x250: 1200000000000000     | 	.quad 18
0x258: 1300000000000000     | 	.quad 19
0x260: ecffffffffffffff     | 	.quad -20
0x268: 1500000000000000     | 	.quad 21
0x270: 1600000000000000     | 	.quad 22
0x278: 1700000000000000     | 	.quad 23
0x280: 1800000000000000     | 	.quad 24
0x288: e7ffffffffffffff     | 	.quad -25
0x290: e6ffffffffffffff     | 	.quad -26
0x298: e5ffffffffffffff     | 	.quad -27
0x2a0: 1c00000000000000     | 	.quad 28
0x2a8: 1d00000000000000     | 	.quad 29
0x2b0: e2ffffffffffffff     | 	.quad -30
0x2b8: e1ffffffffffffff     | 	.quad -31
0x2c0: 2000000000000000     | 	.quad 32
0x2c8: 2100000000000000     | 	.quad 33
0x2d0: 2200000000000000     | 	.quad 34
0x2d8: 2300000000000000     | 	.quad 35
0x2e0: 2400000000000000     | 	.quad 36
0x2e8: 2500000000000000     | 	.quad 37
0x2f0: daffffffffffffff     | 	.quad -38
0x2f8: 2700000000000000     | 	.quad 39
0x300: 2800000000000000     | 	.quad 40
0x308: d7ffffffffffffff     | 	.quad -41
0x310: d6ffffffffffffff     | 	.quad -42
0x318: 2b00000000000000     | 	.quad 43
0x320: 2c00000000000000     | 	.quad 44
0x328: d3ffffffffffffff     | 	.quad -45
0x330: d2ffffffffffffff     | 	.quad -46
0x338: d1ffffffffffffff     | 	.quad -47
0x340: d0ffffffffffffff     | 	.quad -48
0x348: 3100000000000000     | 	.quad 49
0x350: 3200000000000000     | 	.quad 50
0x358: 3300000000000000     | 	.quad 51
0x360: ccffffffffffffff     | 	.quad -52
0x368: cbffffffffffffff     | 	.quad -53
0x370: caffffffffffffff     | 	.quad -54
0x378: c9ffffffffffffff     | 	.quad -55
0x380: c8ffffffffffffff     | 	.quad -56
0x388: 3900000000000000     | 	.quad 57
0x390: 3a00000000000000     | 	.quad 58
0x398: c5ffffffffffffff     | 	.quad -59
0x3a0: c4ffffffffffffff     | 	.quad -60
0x3a8: 3d00000000000000     | 	.quad 61
0x3b0: c2ffffffffffffff     | 	.quad -62
0x3b8: 3f00000000000000     | 	.quad 63
0x3c0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3d0:                      | 	.align 16
0x3d0:                      | Predest:
0x3d0: fadebc0000000000     | 	.quad 0xbcdefa
0x3d8:                      | dest:
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0:                      | Postdest:
0x5d0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5d8:                      | .align 8
                            | # Run time stack
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
                            | 
0x658:                      | Stack:
